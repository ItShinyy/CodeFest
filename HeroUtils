import jsclub.codefest.sdk.Hero;
import jsclub.codefest.sdk.algorithm.PathUtils;
import jsclub.codefest.sdk.base.Node;
import jsclub.codefest.sdk.model.*;
import jsclub.codefest.sdk.model.armors.Armor;
import jsclub.codefest.sdk.model.healing_items.HealingItem;
import jsclub.codefest.sdk.model.npcs.Ally;
import jsclub.codefest.sdk.model.obstacles.Obstacle;
import jsclub.codefest.sdk.model.obstacles.ObstacleTag;
import jsclub.codefest.sdk.model.players.Player;
import jsclub.codefest.sdk.model.weapon.Weapon;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class HeroUtils {
    private final Hero hero;
    private final CombatLogic combatLogic;

    // // State Tracking
    private int chestsBroken = 0;
    private boolean isPvpMode = false;
    private Node lastAttackedChestPosition = null;
    private String targetedItemId = null;
    private final List<String> failedPickupIds = new ArrayList<>();
    private Node lastPosition = null;

    public HeroUtils(Hero hero) {
        this.hero = hero;
        this.combatLogic = new CombatLogic(hero);
    }

    public void executeTurn(Object... args) throws IOException {
        if (args == null || args.length == 0) return;
        GameMap gameMap = hero.getGameMap();
        gameMap.updateOnUpdateMap(args[0]);
        Player player = gameMap.getCurrentPlayer();
        if (player == null || player.getHealth() == 0) return;

        List<Obstacle> allObstacles = gameMap.getListObstacles();

        if (handleHealing(player, gameMap, allObstacles)) return;

        if (lastPosition == null || player.getX() != lastPosition.getX() || player.getY() != lastPosition.getY()) {
            lastPosition = new Node(player.getX(), player.getY());
            failedPickupIds.clear();
            targetedItemId = null;
        }

        if (isPvpMode) {
            if (!combatLogic.handleCombat(player, gameMap, this, allObstacles)) {
                if (!findAndPickupBestItemOnMap(player, gameMap, allObstacles)) {
                    handleChestSearch(player, gameMap, allObstacles);
                }
            }
        } else {
            handleFarmingLogic(player, gameMap, allObstacles);
        }
    }

    private boolean handleHealing(Player player, GameMap gameMap, List<Obstacle> allObstacles) throws IOException {
        if (player.getHealth() < 80) {
            List<Node> healingSources = new ArrayList<>();
            healingSources.addAll(gameMap.getListHealingItems());
            gameMap.getListAllies().stream()
                    .filter(ally -> "SPIRIT".equals(ally.getId()))
                    .forEach(healingSources::add);

            if (healingSources.isEmpty()) return false;

            Optional<Node> bestSourceOptional = healingSources.stream()
                    .filter(source -> calculateHealingSourceScore(source) > 0)
                    .max(Comparator.comparingDouble(source ->
                            calculateHealingSourceScore(source) / (PathUtils.distance(player, source) + 1.0)
                    ));

            if (bestSourceOptional.isPresent()) {
                Node target = bestSourceOptional.get();
                System.out.println("Low health, moving to most EFFICIENT healing source: " + ((Element) target).getId());

                String path = PathUtils.getShortestPath(gameMap, getNodesToAvoid(gameMap, allObstacles), player, target, false);
                if (path != null) {
                    if (path.isEmpty()) {
                        if (target instanceof HealingItem) {
                            hero.pickupItem();
                        }
                    } else {
                        hero.move(path);
                    }
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Calculates a "value score" for a given healing source.
     */
    private double calculateHealingSourceScore(Node source) {
        if (source instanceof HealingItem item) {
            // FIX: Use the correct method names based on the HealingItem class definition.
            double score = item.getHealingHP() + (item.getPoint() * 100);

            if ("ELIXIR_OF_LIFE".equals(item.getId())) {
                score += 1000; // This item is extremely valuable
            }
            return score;
        }

        if (source instanceof Ally ally && "SPIRIT".equals(ally.getId())) {
            // Give SPIRIT a competitive score compared to high-tier healing items.
            return 50.0;
        }

        return 0.0;
    }

    private void handleFarmingLogic(Player player, GameMap gameMap, List<Obstacle> allObstacles) throws IOException {
        if (combatLogic.handleOpportunisticAttack(player, gameMap, this, allObstacles)) return;
        if (handlePostChestBreak(player, gameMap, allObstacles)) return;

        Inventory inventory = hero.getInventory();
        if (inventory.getGun() == null || inventory.getThrowable() == null) {
            if (findAndPickupWeaponType(ElementType.GUN, player, gameMap, allObstacles)) return;
            if (findAndPickupWeaponType(ElementType.THROWABLE, player, gameMap, allObstacles)) return;
        }
        if (inventory.getMelee() == null) {
            if (findAndPickupWeaponType(ElementType.MELEE, player, gameMap, allObstacles)) return;
        }

        handleChestSearch(player, gameMap, allObstacles);
    }

    private boolean findAndPickupWeaponType(ElementType weaponType, Player player, GameMap gameMap, List<Obstacle> allObstacles) throws IOException {
        Optional<Weapon> nearestWeapon = gameMap.getListWeapons().stream()
                .filter(w -> w.getType() == weaponType)
                .min(Comparator.comparingDouble(w -> PathUtils.distance(player, w)));

        if (nearestWeapon.isPresent()) {
            Weapon targetWeapon = nearestWeapon.get();
            System.out.println("Objective: Find a " + weaponType + ". Moving to " + targetWeapon.getId());

            String path = PathUtils.getShortestPath(gameMap, getNodesToAvoid(gameMap, allObstacles), player, targetWeapon, false);
            if (path != null) {
                if (path.isEmpty()) {
                    pickupBestItemAtCurrentLocation(player, gameMap);
                } else {
                    hero.move(path);
                }
                return true;
            }
        }
        return false;
    }

    // ... Các hàm còn lại được giữ nguyên như phiên bản hoàn thiện trước đó ...
    // The rest of the methods remain unchanged from the previous complete version.

    private void checkPickupResult() {
        if (targetedItemId == null) return;
        Inventory inventory = hero.getInventory();

        Stream<Weapon> allWeapons = Stream.of(inventory.getGun(), inventory.getMelee(), inventory.getSpecial(), inventory.getThrowable());
        boolean weaponWasPickedUp = allWeapons.filter(Objects::nonNull).anyMatch(w -> w.getId().equals(targetedItemId));
        boolean armorWasPickedUp = (inventory.getArmor() != null && inventory.getArmor().getId().equals(targetedItemId)) ||
                (inventory.getHelmet() != null && inventory.getHelmet().getId().equals(targetedItemId));

        if (weaponWasPickedUp || armorWasPickedUp) {
            System.out.println("Action with item '" + targetedItemId + "' was successful!");
        } else {
            System.out.println("Action with item '" + targetedItemId + "' failed. Adding to ignore list.");
            failedPickupIds.add(targetedItemId);
        }
        targetedItemId = null;
    }

    private boolean handlePostChestBreak(Player player, GameMap gameMap, List<Obstacle> allObstacles) throws IOException {
        if (lastAttackedChestPosition == null) return false;
        checkPickupResult();

        int chestX = lastAttackedChestPosition.getX();
        int chestY = lastAttackedChestPosition.getY();
        boolean chestIsGone = allObstacles.stream().noneMatch(obs -> obs.getX() == chestX && obs.getY() == chestY);

        if (chestIsGone) {
            if (player.getX() != chestX || player.getY() != chestY) {
                String direction = getAttackDirection(chestX - player.getX(), chestY - player.getY());
                if (direction != null) hero.move(direction);
                return true;
            }
            if (pickupBestItemAtCurrentLocation(player, gameMap)) return true;

            chestsBroken++;
            System.out.println("Chests broken: " + chestsBroken + "/4");

            if (chestsBroken >= 4) {
                Inventory inventory = hero.getInventory();
                if (inventory.getGun() != null || inventory.getThrowable() != null) {
                    System.out.println("All chests broken and ranged weapon available. Engaging PVP mode!");
                    isPvpMode = true;
                } else {
                    System.out.println("All chests broken, but no ranged weapon. Continuing to farm for items.");
                }
            }
            lastAttackedChestPosition = null;
            return false;
        }
        return false;
    }

    private boolean pickupBestItemAtCurrentLocation(Player player, GameMap gameMap) throws IOException {
        List<Element> itemsOnGround = getItemsAt(gameMap, player.getX(), player.getY())
                .stream().filter(item -> !failedPickupIds.contains(item.getId())).toList();
        if (itemsOnGround.isEmpty()) return false;

        Inventory inventory = hero.getInventory();
        Optional<Element> bestItemOptional = itemsOnGround.stream()
                .max(Comparator.comparingDouble(item -> calculateUpgradeScore(item, inventory)));

        if (calculateUpgradeScore(bestItemOptional.get(), inventory) > 0) {
            Element targetItem = bestItemOptional.get();
            this.targetedItemId = targetItem.getId();
            String itemType = determineItemType(targetItem);
            boolean needsToDropItem = false;
            switch (itemType) {
                case "GUN" -> needsToDropItem = inventory.getGun() != null;
                case "MELEE" -> needsToDropItem = inventory.getMelee() != null;
                case "ARMOR" -> needsToDropItem = inventory.getArmor() != null;
                case "HELMET" -> needsToDropItem = inventory.getHelmet() != null;
                case "SPECIAL" -> needsToDropItem = inventory.getSpecial() != null;
                case "THROWABLE" -> needsToDropItem = inventory.getThrowable() != null;
            }
            if (needsToDropItem) hero.revokeItem(itemType);
            else hero.pickupItem();
            return true;
        }
        return false;
    }

    public void handleChestSearch(Player player, GameMap gameMap, List<Obstacle> allObstacles) throws IOException {
        List<Obstacle> chestList = gameMap.getListChests();
        if (chestList.isEmpty()) return;
        Obstacle targetChest = getPriorityChest(chestList, player);
        if (targetChest == null) return;

        int dx = targetChest.getX() - player.getX();
        int dy = targetChest.getY() - player.getY();
        if (Math.abs(dx) + Math.abs(dy) == 1) {
            hero.attack(getAttackDirection(dx, dy));
            lastAttackedChestPosition = new Node(targetChest.getX(), targetChest.getY());
        } else {
            String path = PathUtils.getShortestPath(gameMap, getNodesToAvoid(gameMap, allObstacles), player, targetChest, false);
            if (path != null && !path.isEmpty()) hero.move(path);
        }
    }

    public boolean findAndPickupBestItemOnMap(Player player, GameMap gameMap, List<Obstacle> allObstacles) throws IOException {
        Inventory inventory = hero.getInventory();
        Optional<Element> nearestTarget = Stream.concat(gameMap.getListWeapons().stream(), gameMap.getListArmors().stream())
                .filter(item -> calculateUpgradeScore(item, inventory) > 0)
                .min(Comparator.comparingDouble(item -> PathUtils.distance(player, item)));

        if (nearestTarget.isPresent()) {
            Element target = nearestTarget.get();
            String path = PathUtils.getShortestPath(gameMap, getNodesToAvoid(gameMap, allObstacles), player, target, false);
            if (path != null) {
                if (path.isEmpty()) pickupBestItemAtCurrentLocation(player, gameMap);
                else hero.move(path);
                return true;
            }
        }
        return false;
    }

    public double getPathUtilsDistance(Node a, Node b) { return PathUtils.distance(a, b); }
    public String getPathUtilsShortestPath(GameMap map, List<Node> nodes, Player player, Node target, boolean isPvp) {
        return PathUtils.getShortestPath(map, nodes, player, target, isPvp);
    }

    public List<Player> getAttackablePlayers(GameMap gameMap) { return gameMap.getOtherPlayerInfo(); }
    public Player getNearestPlayer(List<Player> players, Player self) {
        return players.stream().min(Comparator.comparingDouble(p -> PathUtils.distance(self, p))).orElse(null);
    }
    public boolean isOutOfRangedAmmo(Inventory inv) {
        Weapon special = inv.getSpecial();
        Weapon gun = inv.getGun();
        Weapon throwable = inv.getThrowable();
        return (special == null || special.getUseCounts() <= 0) &&
                (gun == null || gun.getUseCounts() <= 0) &&
                (throwable == null || throwable.getUseCounts() <= 0);
    }

    public List<Node> getNodesToAvoid(GameMap gameMap, List<Obstacle> allObstacles) {
        List<Node> nodes = new ArrayList<>();
        for (Obstacle obs : allObstacles) {
            if (obs.getTag().contains(ObstacleTag.TRAP) || !obs.getTag().contains(ObstacleTag.CAN_GO_THROUGH)) {
                nodes.add(obs);
            }
        }
        nodes.addAll(getAttackablePlayers(gameMap));
        nodes.addAll(gameMap.getListEnemies());
        gameMap.getListAllies().stream().filter(ally -> !"SPIRIT".equals(ally.getId())).forEach(nodes::add);
        return nodes;
    }

    private List<Node> getBulletBlockingNodes(GameMap gameMap, List<Obstacle> allObstacles) {
        List<Node> nodes = new ArrayList<>();
        for (Obstacle obs : allObstacles) {
            if (!obs.getTag().contains(ObstacleTag.CAN_SHOOT_THROUGH)) {
                nodes.add(obs);
            }
        }
        nodes.addAll(getAttackablePlayers(gameMap));
        return nodes;
    }

    public boolean hasClearLineOfSight(Player player, Player target, GameMap gameMap, List<Obstacle> allObstacles) {
        List<Node> blockingNodes = getBulletBlockingNodes(gameMap, allObstacles);
        int x1 = player.getX(), y1 = player.getY();
        int x2 = target.getX(), y2 = target.getY();
        if (x1 == x2) {
            for (int y = Math.min(y1, y2) + 1; y < Math.max(y1, y2); y++) {
                for (Node obstacle : blockingNodes) if (obstacle.getX() == x1 && obstacle.getY() == y) return false;
            }
            return true;
        } else if (y1 == y2) {
            for (int x = Math.min(x1, x2) + 1; x < Math.max(x1, x2); x++) {
                for (Node obstacle : blockingNodes) if (obstacle.getX() == x && obstacle.getY() == y1) return false;
            }
            return true;
        }
        return false;
    }

    public String getAttackDirection(int dx, int dy) {
        if (dx > 0) return "r"; if (dx < 0) return "l";
        if (dy > 0) return "d"; if (dy < 0) return "u";
        return null;
    }

    private double calculateUpgradeScore(Element newItem, Inventory inventory) {
        if (newItem instanceof Weapon newWeapon) {
            int baseScore = 0; Weapon currentWeapon = null;
            switch (newWeapon.getType()) {
                case SPECIAL -> { baseScore = 500; currentWeapon = inventory.getSpecial(); }
                case GUN -> { baseScore = 400; currentWeapon = inventory.getGun(); }
                case THROWABLE -> { baseScore = 300; currentWeapon = inventory.getThrowable(); }
                case MELEE -> { baseScore = 100; currentWeapon = inventory.getMelee(); }
            }
            double newScore = newWeapon.getDamage() + newWeapon.getRange();
            if (currentWeapon == null) return baseScore + newScore;
            double currentScore = currentWeapon.getDamage() + currentWeapon.getRange();
            if (newScore > currentScore) return baseScore + (newScore - currentScore);
        }
        if (newItem instanceof Armor newArmor) {
            int baseScore = 200;
            Armor currentArmor = (newArmor.getType() == ElementType.ARMOR) ? inventory.getArmor() : inventory.getHelmet();
            double newScore = newArmor.getHealthPoint() + newArmor.getDamageReduce() * 10;
            if (currentArmor == null) return baseScore + newScore;
            double currentScore = currentArmor.getHealthPoint() + currentArmor.getDamageReduce() * 10;
            if (newScore > currentScore) return baseScore + (newScore - currentScore);
        }
        return 0.0;
    }

    private String determineItemType(Element item) {
        if (item instanceof Weapon) return ((Weapon) item).getType().name();
        if (item instanceof Armor) return ((Armor) item).getType().name();
        return "";
    }

    private List<Element> getItemsAt(GameMap gameMap, int x, int y) {
        List<Element> allItems = new ArrayList<>();
        allItems.addAll(gameMap.getListWeapons());
        allItems.addAll(gameMap.getListArmors());
        return allItems.stream().filter(item -> item.getX() == x && item.getY() == y).collect(Collectors.toList());
    }

    private Obstacle getPriorityChest(List<Obstacle> chests, Player player) {
        return chests.stream()
                .min(Comparator.comparing((Obstacle c) -> "DRAGON_EGG".equals(c.getId()) ? 0 : 1)
                        .thenComparingDouble(c -> PathUtils.distance(player, c)))
                .orElse(null);
    }
}
